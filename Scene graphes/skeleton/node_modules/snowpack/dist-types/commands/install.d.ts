import { CommandOptions, DependencyStatsOutput, ImportMap, InstallTarget, SnowpackConfig, SnowpackSourceFile } from '../types/snowpack';
interface InstallOptions {
    lockfile: ImportMap | null;
    config: SnowpackConfig;
}
declare type InstallResult = {
    success: false;
    importMap: null;
} | {
    success: true;
    importMap: ImportMap;
};
export declare function install(installTargets: InstallTarget[], { lockfile, config }: InstallOptions): Promise<InstallResult>;
export declare function getInstallTargets(config: SnowpackConfig, scannedFiles?: SnowpackSourceFile[]): Promise<InstallTarget[]>;
export declare function command(commandOptions: CommandOptions): Promise<void>;
interface InstallRunOptions extends CommandOptions {
    installTargets: InstallTarget[];
}
interface InstallRunResult {
    success: boolean;
    hasError: boolean;
    importMap: ImportMap | null;
    newLockfile: ImportMap | null;
    stats: DependencyStatsOutput | null;
}
export declare function run({ config, lockfile, installTargets, }: InstallRunOptions): Promise<InstallRunResult>;
export {};
